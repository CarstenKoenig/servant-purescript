-- File auto generated by servant-purescript! --
module Counter.WebAPI.MakeRequests where

import Prelude

import Control.Monad.Aff.Class (class MonadAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadAsk)
import Counter.ServerTypes (AuthToken, CounterAction)
import Counter.WebAPI (SPParams_(..))
import Data.Argonaut.Core (stringify)
import Data.Array (catMaybes, null)
import Data.Maybe (Maybe, Maybe(..))
import Data.Nullable (toNullable)
import Data.String (joinWith)
import Data.Tuple (Tuple(..))
import Network.HTTP.Affjax (AJAX)
import Prim (Int, String)
import Servant.PureScript.Affjax (AjaxError, affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettingsDecodeJson_(..), SPSettingsEncodeJson_(..), SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeHeader, encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)
import Servant.Subscriber (ToUserType)
import Servant.Subscriber.Request (HttpRequest(..))
import Servant.Subscriber.Subscriptions (Subscriptions, makeSubscriptions)
import Servant.Subscriber.Types (Path(..))
import Servant.Subscriber.Util (TypedToUser, subGenFlagQuery, subGenListQuery, subGenNormalQuery, toUserType)

getCounter :: forall m. MonadAsk (SPSettings_ SPParams_) m => m HttpRequest
getCounter = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authToken = spParams_.authToken
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqPath = Path ["counter"]
  let reqHeaders =
        [Tuple "AuthToken" (gDefaultToURLPiece authToken)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

putCounter :: forall m. MonadAsk (SPSettings_ SPParams_) m => CounterAction
              -> m HttpRequest
putCounter reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authToken = spParams_.authToken
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let reqPath = Path ["counter"]
  let reqHeaders =
        [Tuple "AuthToken" (gDefaultToURLPiece authToken)]
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: stringify <<< encodeJson $ reqBody
                }
  pure spReq

