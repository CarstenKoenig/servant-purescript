-- File auto generated by servant-purescript! --
module Counter.WebAPI.Subscriber where

import Prelude

import Control.Monad.Aff.Class (class MonadAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadAsk)
import Counter.ServerTypes (AuthToken)
import Counter.WebAPI (SPParams_(..))
import Data.Argonaut.Core (stringify)
import Data.Array (catMaybes, null)
import Data.Maybe (Maybe, Maybe(..))
import Data.Nullable (toNullable)
import Data.String (joinWith)
import Data.Tuple (Tuple(..))
import Network.HTTP.Affjax (AJAX)
import Prim (Int, String)
import Servant.PureScript.Affjax (AjaxError, affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettingsDecodeJson_(..), SPSettingsEncodeJson_(..), SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeHeader, encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)
import Servant.Subscriber (ToUserType)
import Servant.Subscriber.Request (HttpRequest(..))
import Servant.Subscriber.Subscriptions (Subscriptions, makeSubscriptions)
import Servant.Subscriber.Types (Path(..))
import Servant.Subscriber.Util (TypedToUser, subGenFlagQuery, subGenListQuery, subGenNormalQuery, toUserType)

import Counter.WebAPI.MakeRequests as MakeRequests
getCounter :: forall m a. MonadAsk (SPSettings_ SPParams_) m =>
              TypedToUser Int a -> m (Subscriptions a)
getCounter spToUser_ = do
  spReq <- MakeRequests.getCounter 
  pure $ makeSubscriptions spReq (toUserType spToUser_)

