-- File auto generated by servant-purescript! --
module Counter.WebAPI where

import Prelude

import Control.Monad.Aff.Class (class MonadAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadAsk)
import Counter.ServerTypes (AuthToken, CounterAction)
import Data.Argonaut.Core (stringify)
import Data.Array (catMaybes, null)
import Data.Maybe (Maybe, Maybe(..))
import Data.Nullable (toNullable)
import Data.String (joinWith)
import Network.HTTP.Affjax (AJAX)
import Prim (Int, String)
import Servant.PureScript.Affjax (AjaxError, affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettingsDecodeJson_(..), SPSettingsEncodeJson_(..), SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeHeader, encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)

newtype SPParams_ = SPParams_ { authToken :: Maybe
                              , baseURL :: String
                              }

getCounter :: forall eff m.
              MonadAsk (SPSettings_ SPParams_) m => MonadError AjaxError m => MonadAff ( ajax :: AJAX | eff) m
              => m Int
getCounter = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authToken = spParams_.authToken
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let queryString = ""
  let reqUrl = baseURL <> "counter" <> queryString
  let reqHeaders =
        [{ field : "AuthToken" , value : encodeHeader spOpts_' authToken
         }]
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 }
  affResp <- affjax affReq
  let decodeJson = case spOpts_.decodeJson of SPSettingsDecodeJson_ d -> d
  getResult affReq decodeJson affResp

putCounter :: forall eff m.
              MonadAsk (SPSettings_ SPParams_) m => MonadError AjaxError m => MonadAff ( ajax :: AJAX | eff) m
              => CounterAction -> m Int
putCounter reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let authToken = spParams_.authToken
  let baseURL = spParams_.baseURL
  let httpMethod = "PUT"
  let queryString = ""
  let reqUrl = baseURL <> "counter" <> queryString
  let reqHeaders =
        [{ field : "AuthToken" , value : encodeHeader spOpts_' authToken
         }]
  let encodeJson = case spOpts_.encodeJson of SPSettingsEncodeJson_ e -> e
  let affReq = defaultRequest
                 { method = httpMethod
                 , url = reqUrl
                 , headers = defaultRequest.headers <> reqHeaders
                 , content = toNullable <<< Just <<< stringify <<< encodeJson $ reqBody
                 }
  affResp <- affjax affReq
  let decodeJson = case spOpts_.decodeJson of SPSettingsDecodeJson_ d -> d
  getResult affReq decodeJson affResp

