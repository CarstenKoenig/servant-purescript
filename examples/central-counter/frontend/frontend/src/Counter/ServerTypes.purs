-- File auto generated by purescript-bridge! --
module Counter.ServerTypes where

import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Int, String)

import Prelude

newtype AuthToken =
    VerySecret String

derive instance genericAuthToken :: Generic AuthToken _
derive instance newtypeAuthToken :: Newtype AuthToken _

--------------------------------------------------------------------------------
_VerySecret :: Iso' AuthToken String
_VerySecret = _Newtype
--------------------------------------------------------------------------------
data CounterAction =
    CounterAdd Int
  | CounterSet Int

derive instance genericCounterAction :: Generic CounterAction _

--------------------------------------------------------------------------------
_CounterAdd :: Prism' CounterAction Int
_CounterAdd = prism' CounterAdd f
  where
    f (CounterAdd a) = Just $ a
    f _ = Nothing

_CounterSet :: Prism' CounterAction Int
_CounterSet = prism' CounterSet f
  where
    f (CounterSet a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Hello =
    Hello {
      _message :: String
    }

derive instance genericHello :: Generic Hello _
derive instance newtypeHello :: Newtype Hello _

--------------------------------------------------------------------------------
_Hello :: Iso' Hello { _message :: String}
_Hello = _Newtype

message :: Lens' Hello String
message = _Newtype <<< prop (SProxy :: SProxy "_message")

--------------------------------------------------------------------------------
